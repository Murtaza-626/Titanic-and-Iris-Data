# -*- coding: utf-8 -*-
"""23L2645.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1os0M8GyYSDmKC_JFPdCn3luqFWbZYnBK

1: Titanic:
"""

import sys
import pandas as pd
import matplotlib.pyplot as plt

# Function to get information of the variable:
def VariablesInfo(data,var):
  # Datatype of the variable:
  data_type = data[var].dtype

  # Total intances of the variable:
  total_instances = data[var].count()

  # No of nulls of the variables:
  No_of_nulls = data[var].isnull().sum()

  if data_type.name != 'object':
    skewness = data[var].skew()
    print(f"Skewness: {skewness}")

    # Detecting outliers:
    Q1 = data[var].quantile(0.25)
    Q3 = data[var].quantile(0.75)
    IQR = Q3 - Q1
    outliers = data[(data[var] > (Q3 + 1.5*IQR)) | (data[var] < (Q1 - 1.5*IQR))]


    # No of outliers
    No_of_outliers = len(outliers)

    # Min and Max values of the variable:
    min_value = data[var].min()
    max_value = data[var].max()

    # Mean of the variable:
    mean = data[var].mean()

    #Variance of variable:
    variance = data[var].var()

    # Standard Deviation of variable:
    std = data[var].std()

    # Mode of the variable:
    mode = data[var].mode().tolist() # Here tolist() converst modes into a list incase of multiple modes

    # Median of the variable:
    median = data[var].median()

    # Storing all information into a list:
    Var_Info = [data_type, total_instances, No_of_nulls, No_of_outliers, min_value, max_value, mode, mean, median, variance, std]
    return Var_Info

  else:
    mode = data[var].mode().tolist()
    Var_Info = [data_type, total_instances, No_of_nulls, mode]
    return Var_Info


# Function to make graphs of variable:
def MakeGraphs(data, var, unique_mapping = None):  # If unique mapping is not passed in the function parameter then it will be none, means that it is numeric data

    points = data[var].dropna()  # Contains the points of variables excluding missing values

    # Create histogram and boxplot
    fig, axs = plt.subplots(1, 3, figsize = (10,4))  # Creates graphs of 10 x 4 inches
    axs[0].hist(points)
    axs[0].set_xlabel(var)
    axs[0].set_ylabel('Frequency')
    axs[0].set_title('Histogram')

    axs[1].boxplot(points, vert=True)
    axs[1].set_xlabel(var)
    axs[1].set_ylabel(var)
    axs[1].set_title('Boxplot')

    axs[2].scatter(range(len(points)),points, s=1)
    axs[2].set_xlabel('Index')
    axs[2].set_ylabel(var)
    axs[2].set_title('Scatter Plot')

    plt.tight_layout(pad=2)
    plt.show()



# Function to handle missing values:
def FillMissing(data,var,threshold):
  num_missing  = data[var].isna().sum()
  if(num_missing >= threshold):  # If number of missing values are greater than or equal to threshold, then fill them by mean of the variable
    if data[var].dtype.name == 'object':
      mode = data[var].mode()[0]
      data[var] = data[var].fillna(mode)  # For object datatype, we fill values by mode
    else:
      mean = data[var].mean()
      data[var] = data[var].fillna(mean)  # For integer or float datatype, we fill by mean
  else:
    data = data.dropna(subset=[var])     # Drop the rows otherwise

  return data[var]


# Main working:
data_titanic  = pd.read_csv('Titanic.csv')
data_iris = pd.read_csv('Iris.csv')

while True:
  file_name = input("Enter file name (Titanic or Iris): ")
  if file_name not in ['Titanic','Iris']:
    print("Invalid file name, Enter a valid name: ")
  else:
    break


if file_name == 'Titanic':
  data = data_titanic
  while True:
    var = input("Enter the variable name :")
    if var in data:
      break
    else:
      print("Invalid variabe name, Plz enter a valid name: ")


elif file_name == 'Iris':
  data = data_iris
  while True:
    var = input("Enter the variable name :")
    if var in data:
      break
    else:
      print("Invalid variabe name, Plz enter a valid name: ")


info = VariablesInfo(data,var)

if data[var].dtype.name != 'object':
  print(f'Datatype of variable: {info[0]}')
  print(f'Total instances of the variable: {info[1]}')
  print(f'Number of nulls of the variable: {info[2]}')
  print(f'Number of outliers: {info[3]}')
  print(f'Minimum value of the variable: {info[4]}')
  print(f'Maximum value of the variable: {info[5]}')
  print(f'Mode of the variable: {info[6]}')
  print(f'Mean of the variable: {info[7]}')
  print(f'Median of the variable: {info[8]}')
  print(f'Variance of the variable: {info[9]}')
  print(f'Standard Deviation of the variable: {info[10]}')
  print("Graphs of the variable:")
  MakeGraphs(data,var)

else:
  print(f'Datatype of variable: {info[0]}')
  print(f'Total instances of the variable: {info[1]}')
  print(f'Number of nulls of the variable: {info[2]}')
  print(f'Mode of the variable: {info[3]}')


if info[2] == 0:  # info[2] contains the number of missing values
    print('No missing values')
else:
    print('Column after filling missing values: ')
    info = FillMissing(data,var,0.3)  # Here we set a threshold of 30%
    print(info)